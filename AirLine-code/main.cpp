#include "function.h"

/*基本功能
 * 有向网：抵达时间减去起飞时间为权值（以分钟为单位）
 * 机场数字为顶点
 *
 * 邻接矩阵的构建
 *
 * 对于功能1：需不需要考虑由于一个机场到另一个机场的航线时间问题，导致飞到另一个机场时已经错过了此机场飞往其他机场的航线
 *
 * 功能2：BFS 47，64；52，3
 *
 * 功能3.DFS+剪枝优化
 * 测试用例：49，50；4，40;
 *  7,39; 7,23;52, 3
 *
 * 功能4：在一次转机的情况下，需要保证上一条航线的抵达时间在下一条航线出发时间之前(仅限最多一次转机)
 * 测试用例：48，49； 20， 58； 4，76; 4,100(错误输入），35，35（错误输入）
 *
 * 之后的几个功能：起始时间的天都是6日
 *
 * 功能5：48 50； 5 10 20；5 15 20；5 10 20；5 23 20；6  最终结果：1
 *       48，49； -1 -1 -1；-1 -1 -1；-1 -1 -1；-1 -1 -1； 1，1 最终结果：存在一条可行的1，1838，1841，2250，1731
 *       48 50；无时间要求，机型要求1；最终结果包含1208-67-103
 *
 * 功能6：49 50； 6 21 0； 6 22 0； -1 -1 -1； -1 -1 -1； 1， 4
 *      算法效率测试：52 3（无任何要求）
 *
 *
*/

int main()
{
    ReadFile("C:\\Users\\lenovo\\Desktop\\Data structure\\program\\AirLine\\data.csv");//必须两个斜杠，换设备时需要更换存储路径
    ALGraph ALG;//用邻接表存储的图
    MGraph MG; //用邻接矩阵存储的图
    CreateGraph(ALG);
    CreateGraph(MG);
    int choice;
    while(1)
    {
        cout << "******************************************************************************************************************" << endl
             << "如果你想用邻接表来完成从任意机场出发的遍历并输出遍历结果，包括深度优先遍历和广度优先遍历，请输入1；" << endl
             << "如果你想使用邻接矩阵表来完成任意两个机场的可连通性(包括是否可以直飞、1次中转、2次中转等)，请输入2；" << endl
             << "如果你想求任意两个机场之间的最短飞行时间，请输入3；" << endl
             << "如果你想在仅限直飞或1次中转的条件下求任意两个机场的航线，请输入4；" <<endl
             << "如果你想在给定起飞时段或者降落时段或者机型要求的情况下，求任意两个机场的多个备选航线，请输入5；" << endl
             << "如果你想在给定起飞时段或者降落时段或者机型要求的情况下，求任意两个机场之间的航费（机票价格）最低的路径，请输入6；" << endl
             << "如果你想在给定飞行时长或者中转时间限制的情况下，求任意两个机场的多个备选航线（航班ID顺序表），请输入7；" << endl
             << "如果你想结束程序，请输入8。" << endl << endl;

        cout << "请输入你的选择（注意：若输入1-8以外的数则被视为非法输入）：";
        cin >> choice;
        cout << endl;
        switch (choice) {
        case 1:
            //打印输出从任意机场出发的遍历,包括深度优先遍历和广度优先遍历
            Mission1(ALG); //此处为输出所有遍历结果，也可只输出从某一个特定机场为起始点的一次遍历结果
            break;
        case 2:
            Mission2(MG);
            break;
        case 3:
            Mission3(MG);//注：此处的最短时间唯一，但路径不一定唯一
            break;
        case 4:
            Mission4(MG);
            break;
        case 5:
            Mission5(MG);
            break;
        case 6:
            Mission6(MG);
            break;
        case 7:
            Mission7(MG);
            break;
        case 8:
            FreeGraph(MG);//释放空间
            cout << "程序结束，请敲击'Enter'键以退出." << endl;
            exit(0);
            break;
        default:
            cout << "非法输入！请重新输入。" << endl << endl;
            break;
        }
    }
    return 0;
}

